name: CI

on:
  push:
    branches: [ main, develop ]
    tags: ['v*']
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.8'
  REDIS_MAXMEMORY: 256mb
  REDIS_MAXMEMORY_POLICY: allkeys-lru
  DOCKER_IMAGE: refactool
  DOCKER_REGISTRY: ${{ secrets.DOCKERHUB_USERNAME }}

permissions:
  contents: read
  id-token: write

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
      checks: write
    
    services:
      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          REDIS_MAXMEMORY: ${{ env.REDIS_MAXMEMORY }}
          REDIS_MAXMEMORY_POLICY: ${{ env.REDIS_MAXMEMORY_POLICY }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: |
          requirements.txt
          requirements-dev.txt
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt -r requirements-dev.txt
        
    - name: Start Celery worker
      run: |
        celery -A api.src.tasks worker --loglevel=info --pool=solo &
        sleep 5
        
    - name: Lint with flake8
      run: |
        flake8 . --count --show-source --statistics --max-complexity=10
        
    - name: Run tests
      env:
        PYTHONPATH: ${{ github.workspace }}
        COVERAGE_FILE: .coverage
      run: |
        pytest -v tests/ --cov=api --cov-report=xml --cov-report=html --junitxml=test-results.xml
        
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          coverage.xml
          htmlcov
          test-results.xml
        retention-days: 7

  quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 mypy types-all
        
    - name: Check formatting
      run: black . --check --diff
      
    - name: Lint with flake8
      run: |
        flake8 . --count --show-source --statistics --max-complexity=10
        
    - name: Type check
      run: |
        mypy api tests --ignore-missing-imports

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety pip-audit
        
    - name: Run security scans
      run: |
        bandit -r . -f json -o security-report.json -ll
        safety check -r requirements.txt --json > dependencies-report.json
        pip-audit --requirement requirements.txt --format json > audit-report.json
        
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          security-report.json
          dependencies-report.json
          audit-report.json
        retention-days: 7

  publish:
    needs: [test, quality, security]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: Build package
      run: python -m build
      
    - name: Publish to TestPyPI
      if: github.ref == 'refs/heads/main'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        skip-existing: true
        verbose: true
        print-hash: true
        
    - name: Publish to PyPI
      if: startsWith(github.ref, 'refs/tags/v')
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        skip-existing: true
        verbose: true
        print-hash: true

  docker:
    needs: [test, quality, security]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-latest
    env:
      DOCKER_TAG: ${{ github.sha }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:buildcache
        cache-to: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:buildcache,mode=max
        
    - name: Update Docker Hub description
      uses: peter-evans/dockerhub-description@v4
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        repository: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}
        short-description: Analisador de código com cache distribuído e alta performance
        readme-filepath: ./README.md