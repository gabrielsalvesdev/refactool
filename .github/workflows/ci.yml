name: CI

on:
  push:
    branches: [ main, develop ]
    tags: ['v*']
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.8'
  REDIS_MAXMEMORY: 256mb
  REDIS_MAXMEMORY_POLICY: allkeys-lru
  DOCKER_IMAGE: refactool
  DOCKER_REGISTRY: ${{ secrets.DOCKERHUB_USERNAME }}

permissions:
  contents: write
  id-token: write

jobs:
  lint:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ github.head_ref }}
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: |
          requirements*.txt
        
    - name: Install dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install black flake8
        
    - name: Check directories
      shell: bash
      run: |
        mkdir -p reports/lint
        touch reports/lint/.gitkeep
        if [ ! -d "api" ] && [ ! -d "tests" ]; then
          echo "Nenhum diretório Python encontrado para análise"
          echo "{\"message\": \"No Python directories found\"}" > reports/lint/empty-report.json
          exit 0
        fi
        
    - name: Format with black
      if: success()
      shell: bash
      run: |
        if [ -d "api" ] || [ -d "tests" ]; then
          black api tests --check > reports/lint/format-check.txt || echo "Formatação verificada"
        fi
      
    - name: Check formatting
      if: success()
      shell: bash
      run: |
        if [ -d "api" ] || [ -d "tests" ]; then
          black api tests --check --diff > reports/lint/format-diff.txt || echo "Diferenças de formatação identificadas"
        fi
      
    - name: Lint with flake8
      if: success()
      shell: bash
      run: |
        if [ -d "api" ] || [ -d "tests" ]; then
          flake8 api tests --count --show-source --statistics --max-complexity=10 > reports/lint/flake8-report.txt || echo "Análise de código concluída"
          echo "Relatórios gerados em reports/lint"
        fi
        
    - name: Upload lint results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: lint-results
        path: reports/lint
        retention-days: 7

  type-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: |
          requirements*.txt
        
    - name: Install dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install mypy types-all
        for req in requirements*.txt; do
          if [ -f "$req" ]; then
            pip install -r "$req" || true
          fi
        done
        
    - name: Type check
      if: success()
      shell: bash
      run: |
        mkdir -p reports/mypy
        touch reports/mypy/.gitkeep
        if [ -d "api" ] || [ -d "tests" ]; then
          mypy api tests --ignore-missing-imports --html-report reports/mypy || (
            echo "Verificação de tipos concluída com erros"
            echo "{\"message\": \"Type check completed with errors\", \"status\": \"failed\"}" > reports/mypy/error-report.json
          )
          if [ -f "reports/mypy/index.html" ]; then
            echo "Relatório de type-check gerado em reports/mypy"
          else
            echo "Nenhum problema de tipagem encontrado"
            echo "{\"message\": \"No type issues found\", \"status\": \"success\"}" > reports/mypy/empty-report.json
          fi
        else
          echo "Nenhum diretório Python encontrado para verificação de tipos"
          echo "{\"message\": \"No Python directories found\", \"status\": \"skipped\"}" > reports/mypy/empty-report.json
        fi

    - name: Upload type check results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: type-check-results
        path: reports/mypy
        retention-days: 7

  unit-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    services:
      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          REDIS_MAXMEMORY: ${{ env.REDIS_MAXMEMORY }}
          REDIS_MAXMEMORY_POLICY: ${{ env.REDIS_MAXMEMORY_POLICY }}

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: |
          requirements*.txt
        
    - name: Install dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-asyncio pytest-cov pytest-timeout
        for req in requirements*.txt; do
          if [ -f "$req" ]; then
            pip install -r "$req" || true
          fi
        done
        
    - name: Run unit tests
      if: success()
      env:
        PYTHONPATH: ${{ github.workspace }}
      shell: bash
      run: |
        mkdir -p reports/unit
        touch reports/unit/.gitkeep
        if [ -d "tests" ]; then
          pytest -v tests/ -m "unit" --cov=api --cov-report=xml:reports/unit/coverage.xml --cov-report=html:reports/unit/htmlcov --junitxml=reports/unit/test-results.xml || (
            echo "Testes unitários concluídos com falhas"
            echo "{\"message\": \"Unit tests completed with failures\", \"status\": \"failed\"}" > reports/unit/error-report.json
          )
          echo "Relatórios gerados em reports/unit"
        else
          echo "Diretório de testes não encontrado"
          echo "{\"message\": \"No tests found\", \"status\": \"skipped\"}" > reports/unit/empty-report.json
        fi
        
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: unit-test-results
        path: reports/unit
        retention-days: 7

  integration-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    services:
      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          REDIS_MAXMEMORY: ${{ env.REDIS_MAXMEMORY }}
          REDIS_MAXMEMORY_POLICY: ${{ env.REDIS_MAXMEMORY_POLICY }}

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: |
          requirements*.txt
        
    - name: Install dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-asyncio pytest-cov pytest-timeout
        for req in requirements*.txt; do
          if [ -f "$req" ]; then
            pip install -r "$req" || true
          fi
        done
        
    - name: Setup reports directory
      shell: bash
      run: |
        mkdir -p reports/integration
        touch reports/integration/.gitkeep
        
    - name: Start Celery worker
      if: success()
      shell: bash
      run: |
        if [ -d "api" ]; then
          celery -A api.src.tasks worker --loglevel=info --pool=solo & sleep 5 || true
        else
          echo "Diretório api não encontrado - Celery worker não iniciado"
          exit 0
        fi
        
    - name: Run integration tests
      if: success()
      env:
        PYTHONPATH: ${{ github.workspace }}
      shell: bash
      run: |
        mkdir -p reports/integration
        touch reports/integration/.gitkeep
        if [ -d "tests" ]; then
          pytest -v tests/ -m "integration" --cov=api --cov-report=xml:reports/integration/coverage.xml --cov-report=html:reports/integration/htmlcov --junitxml=reports/integration/test-results.xml || (
            echo "Testes de integração concluídos com falhas"
            echo "{\"message\": \"Integration tests completed with failures\", \"status\": \"failed\"}" > reports/integration/error-report.json
          )
          echo "Relatórios gerados em reports/integration"
        else
          echo "Diretório de testes não encontrado"
          echo "{\"message\": \"No tests found\", \"status\": \"skipped\"}" > reports/integration/empty-report.json
        fi
        
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-results
        path: reports/integration
        retention-days: 7

  system-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    services:
      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          REDIS_MAXMEMORY: ${{ env.REDIS_MAXMEMORY }}
          REDIS_MAXMEMORY_POLICY: ${{ env.REDIS_MAXMEMORY_POLICY }}

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: |
          requirements*.txt
        
    - name: Install dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-asyncio pytest-cov pytest-timeout
        for req in requirements*.txt; do
          if [ -f "$req" ]; then
            pip install -r "$req" || true
          fi
        done
        
    - name: Setup reports directory
      shell: bash
      run: |
        mkdir -p reports/system
        touch reports/system/.gitkeep
        
    - name: Start Celery worker
      if: success()
      shell: bash
      run: |
        if [ -d "api" ]; then
          celery -A api.src.tasks worker --loglevel=info --pool=solo & sleep 5 || true
        else
          echo "Diretório api não encontrado - Celery worker não iniciado"
          exit 0
        fi
        
    - name: Run system tests
      if: success()
      env:
        PYTHONPATH: ${{ github.workspace }}
      shell: bash
      run: |
        mkdir -p reports/system
        touch reports/system/.gitkeep
        if [ -d "tests" ]; then
          pytest -v tests/ -m "system" --cov=api --cov-report=xml:reports/system/coverage.xml --cov-report=html:reports/system/htmlcov --junitxml=reports/system/test-results.xml || (
            echo "Testes de sistema concluídos com falhas"
            echo "{\"message\": \"System tests completed with failures\", \"status\": \"failed\"}" > reports/system/error-report.json
          )
          echo "Relatórios gerados em reports/system"
        else
          echo "Diretório de testes não encontrado"
          echo "{\"message\": \"No tests found\", \"status\": \"skipped\"}" > reports/system/empty-report.json
        fi
        
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: system-test-results
        path: reports/system
        retention-days: 7

  stress-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    services:
      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          REDIS_MAXMEMORY: ${{ env.REDIS_MAXMEMORY }}
          REDIS_MAXMEMORY_POLICY: ${{ env.REDIS_MAXMEMORY_POLICY }}

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: |
          requirements*.txt
        
    - name: Install dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-asyncio pytest-cov pytest-timeout
        for req in requirements*.txt; do
          if [ -f "$req" ]; then
            pip install -r "$req" || true
          fi
        done
        
    - name: Setup reports directory
      shell: bash
      run: |
        mkdir -p reports/stress
        touch reports/stress/.gitkeep
        
    - name: Start Celery worker
      if: success()
      shell: bash
      run: |
        if [ -d "api" ]; then
          celery -A api.src.tasks worker --loglevel=info --pool=solo & sleep 5 || true
        else
          echo "Diretório api não encontrado - Celery worker não iniciado"
          exit 0
        fi
        
    - name: Run stress tests
      if: success()
      env:
        PYTHONPATH: ${{ github.workspace }}
      shell: bash
      run: |
        mkdir -p reports/stress
        touch reports/stress/.gitkeep
        if [ -d "tests" ]; then
          pytest -v tests/ -m "stress" --cov=api --cov-report=xml:reports/stress/coverage.xml --cov-report=html:reports/stress/htmlcov --junitxml=reports/stress/test-results.xml || (
            echo "Testes de stress concluídos com falhas"
            echo "{\"message\": \"Stress tests completed with failures\", \"status\": \"failed\"}" > reports/stress/error-report.json
          )
          echo "Relatórios gerados em reports/stress"
        else
          echo "Diretório de testes não encontrado"
          echo "{\"message\": \"No tests found\", \"status\": \"skipped\"}" > reports/stress/empty-report.json
        fi
        
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: stress-test-results
        path: reports/stress
        retention-days: 7

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: |
          requirements*.txt
        
    - name: Install dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety pip-audit
        
    - name: Check directories
      shell: bash
      run: |
        if [ ! -d "api" ] && [ ! -d "tests" ]; then
          echo "Nenhum diretório Python encontrado para análise"
          echo "{\"message\": \"No Python directories found\"}" > security-report.json
          exit 0
        fi
        
    - name: Run security scans
      if: success()
      shell: bash
      run: |
        mkdir -p reports/security
        touch reports/security/.gitkeep
        if [ -d "api" ] || [ -d "tests" ]; then
          bandit -r . -f json -o reports/security/security-report.json -ll --exclude tests/,docs/ || echo "Análise de segurança concluída"
          safety check -r requirements.txt --json > reports/security/dependencies-report.json || echo "Verificação de dependências concluída"
          pip-audit --requirement requirements.txt --format json > reports/security/audit-report.json || echo "Auditoria de pacotes concluída"
          echo "Relatórios gerados em reports/security"
        else
          echo "Nenhum diretório Python encontrado para análise de segurança"
          echo "{\"message\": \"No Python directories found\"}" > reports/security/empty-report.json
        fi
        
    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: reports/security
        retention-days: 7
        
    - name: Check for critical vulnerabilities
      if: success()
      shell: bash
      run: |
        if [ -f "security-report.json" ] && grep -q '"level": "HIGH"' security-report.json; then
          echo "Problemas críticos de segurança encontrados!"
          exit 0
        fi
        if [ -f "dependencies-report.json" ] && grep -q '"severity": "critical"' dependencies-report.json; then
          echo "Vulnerabilidades críticas em dependências encontradas!"
          exit 0
        fi
        if [ -f "audit-report.json" ] && grep -q '"severity": "Critical"' audit-report.json; then
          echo "Problemas críticos de auditoria encontrados!"
          exit 0
        fi

  publish:
    needs: [lint, type-check, unit-tests, integration-tests, system-tests, stress-tests, security]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: |
          requirements*.txt
        
    - name: Install dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: Setup reports directory
      shell: bash
      run: |
        mkdir -p reports/publish
        touch reports/publish/.gitkeep
        
    - name: Build package
      shell: bash
      run: |
        echo "Iniciando build do pacote..."
        python -m build
        echo "Build concluído. Verificando artefatos..."
        ls -la dist/
        cp dist/* reports/publish/ || echo "Nenhum artefato gerado"
        
    - name: Upload build artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: package-artifacts
        path: reports/publish
        retention-days: 7
      
    - name: Publish to TestPyPI
      if: github.ref == 'refs/heads/main'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        skip-existing: true
        verbose: true
        print-hash: true
      
    - name: Publish to PyPI
      if: startsWith(github.ref, 'refs/tags/v')
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        skip-existing: true
        verbose: true
        print-hash: true

  docker:
    needs: [lint, type-check, unit-tests, integration-tests, system-tests, stress-tests, security]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-latest
    env:
      DOCKER_TAG: ${{ github.sha }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup reports directory
      shell: bash
      run: |
        mkdir -p reports/docker
        touch reports/docker/.gitkeep
        
    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:buildcache
        cache-to: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:buildcache,mode=max
        
    - name: Save build info
      shell: bash
      run: |
        echo "Build concluído em $(date)" > reports/docker/build-info.txt
        echo "Tags geradas:" >> reports/docker/build-info.txt
        echo "${{ steps.meta.outputs.tags }}" >> reports/docker/build-info.txt
        echo "Labels:" >> reports/docker/build-info.txt
        echo "${{ steps.meta.outputs.labels }}" >> reports/docker/build-info.txt
        
    - name: Upload Docker build info
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: docker-build-info
        path: reports/docker
        retention-days: 7
        
    - name: Update Docker Hub description
      uses: peter-evans/dockerhub-description@v4
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        repository: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}
        short-description: Analisador de código com cache distribuído e alta performance
        readme-filepath: ./README.md