name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DOCKER_IMAGE: refactool
  DOCKER_TAG: ${{ github.sha }}

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 10
          --name redis
          --network-alias redis

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pytest pytest-cov pytest-asyncio redis
      
      - name: Install Redis CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y redis-tools
      
      - name: Wait for Redis
        run: |
          echo "Aguardando Redis ficar disponível..."
          for i in {1..30}; do
            if redis-cli ping > /dev/null 2>&1; then
              echo "Redis está disponível!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "Redis não ficou disponível após 30 tentativas"
              exit 1
            fi
            echo "Tentativa $i: Redis ainda não está disponível..."
            sleep 1
          done
      
      - name: Run tests
        env:
          REDIS_HOST: redis
          REDIS_PORT: 6379
        run: |
          mkdir -p test-reports/coverage
          PYTHONPATH=$PYTHONPATH:$(pwd) pytest --cov=microservices --cov=api --cov-report=xml:test-reports/coverage/coverage.xml --cov-report=html:test-reports/coverage -v tests/
      
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: test-reports/coverage/coverage.xml
          retention-days: 7

      - name: Discord Notification
        if: always()
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "Test Results"
          description: |
            Branch: ${{ github.ref }}
            Status: ${{ job.status }}
            Coverage Report Available
          ack_no_webhook: true

  quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install black flake8
      
      - name: Format code
        run: |
          black .
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git commit -am "style: Format code with Black" || true
      
      - name: Run linter
        run: |
          flake8 . \
            --count \
            --max-line-length=120 \
            --extend-ignore=E203,W503,E402,F401 \
            --statistics

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install bandit
      
      - name: Run security scan
        run: |
          bandit -r . -f json -o security-report.json -ll -ii -s B101,B104,B105,B108 || true
      
      - name: Upload security report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-report
          path: security-report.json
          retention-days: 7

  publish:
    needs: [test, quality, security]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      
      - name: Build package
        run: python -m build
      
      - name: Publish to Test PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}
        run: |
          twine upload --repository testpypi dist/*
      
      - name: Publish to PyPI
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          twine upload dist/*

      - name: Discord Notification
        if: always()
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "Package Published"
          description: |
            Version: ${{ github.ref }}
            Status: ${{ job.status }}
            Published to: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags') && 'PyPI' || 'Test PyPI' }}
          ack_no_webhook: true

  docker:
    needs: [test, quality, security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:buildcache,mode=max

      - name: Discord Notification
        if: always()
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "Docker Build"
          description: |
            Branch: ${{ github.ref }}
            Status: ${{ job.status }}
            Image: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
          ack_no_webhook: true

  # Remover jobs que não estão sendo usados ainda
  # stress_tests:
  # log_analysis: 